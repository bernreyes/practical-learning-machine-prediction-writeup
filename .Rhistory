mean(Simulation)
hist(Simulation,col="blue",main="Distribution of Means for exponential")
```
Theoretial Mean
```{r, echo=TRUE, message=FALSE, error=FALSE}
1/lambda
```
Compare sample mean and theoretical mean
```{r, echo=TRUE, message=FALSE, error=FALSE}
mean(Simulation) - (1/lambda)
```
##SAMPLE VARIANCE VS THEORETICAL VARIANCE (with figure???? and numbers)
Sample Variance
```{r, echo=TRUE, message=FALSE, error=FALSE}
var(Simulation)
```
Theoretical Variance
```{r, echo=TRUE, message=FALSE, error=FALSE}
((1/lambda)/sqrt(exponential))^2
```
Compare sample vaiance and theoretical variance
```{r, echo=TRUE, message=FALSE, error=FALSE}
var(Simulation) - (((1/lambda)/sqrt(exponential))^2)
```
##DISTRIBUTION
Distribution of 40 exponentials
```{r, echo=TRUE, message=FALSE, error=FALSE}
hist(Simulation, breaks = exponential, prob = T, col = "green", xlab = "Means", main="Distribution of 40 Exponentials")
a <- seq(min(Simulation), max(Simulation), length = 100)
lines(a, dnorm(a, mean = 1/lambda, sd = (1/lambda/sqrt(exponential))), pch = 25, col = "black")
lines(a, dnorm(a, mean = mean(Simulation), sd = var(Simulation)), pch = 25, col = "red")
```
Simulation for 1000 random exponential
```{r, echo=TRUE, message=FALSE, error=FALSE}
exponentialLarge <- 1000
SimulationLarge <- NULL
for(i in 1:1000) {
SimulationLarge <- c(SimulationLarge, mean(rexp(exponentialLarge, lambda)))
}
```
Distribution of 1000 exponential
```{r, echo=TRUE, message=FALSE, error=FALSE}
hist(SimulationLarge, breaks = 40, prob = T, col = "green", xlab = "Means", main="Distribution of 1000 Exponentials")
b <- seq(min(SimulationLarge), max(SimulationLarge), length = 100)
lines(b, dnorm(b, mean = 1/lambda, sd = (1/lambda/sqrt(exponentialLarge))), pch = 25, col = "black")
lines(b, dnorm(b, mean = mean(SimulationLarge), sd = sqrt(var(SimulationLarge))), pch = 25, col = "red")
```
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Peesonal/Documents/Dette/Coursera/5. Reproducible Research/W4 - Case Studies & Commentaries/Project")
stormdata <- read.csv("repdata%2Fdata%2FStormData.csv.bz2", header = TRUE, sep = ",")
library(dplyr)
storm<-filter(stormdata,INJURIES>0 | FATALITIES>0 | PROPDMG>0 | CROPDMG>0)
storm2<-select(storm,EVTPYE,INJURIES,FATALITIES,PROPDMG,PROPDMGEXP,CROPDMG,CROPDMGEXP)
storm2<-select(storm,EVTYPE,INJURIES,FATALITIES,PROPDMG,PROPDMGEXP,CROPDMG,CROPDMGEXP)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Peesonal/Documents/Dette/Coursera/5. Reproducible Research/W4 - Case Studies & Commentaries/Project")
stormdata <- read.csv("repdata%2Fdata%2FStormData.csv.bz2", header = TRUE, sep = ",")
library(dplyr)
storm<-filter(stormdata,INJURIES>0 | FATALITIES>0 | PROPDMG>0 | CROPDMG>0)
storm2<-select(storm,EVTYPE,INJURIES,FATALITIES,PROPDMG,PROPDMGEXP,CROPDMG,CROPDMGEXP)
write.csv(storm2,'stornm2.csv')
stormdata3 <- read.csv("storm2.csv", header = TRUE, sep = ",")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Peesonal/Documents/Dette/Coursera/5. Reproducible Research/W4 - Case Studies & Commentaries/Project")
library(dplyr)
stormdata <- read.csv("storm2.csv", header = TRUE, sep = ",")
storm2 <- read.csv("storm2.csv", header = TRUE, sep = ",")
table(storm2$PROPDMGEXP)
table(storm2$CROPDMGEXP)
stormdata2$checkdata <- storm2$FATALITIES + storm2$INJURIES
storm2$checkdata <- storm2$FATALITIES + storm2$INJURIES
table(storm2$checkdata)
table(storm2$PROPDMGEXP)
storm2$propexp2 <- 0
storm2[which(storm2$PROPDMGEXP=="K" | storm2$PROPDMGEXP=="k"),]$propexp2 <- 10^3
storm2[which(storm2$PROPDMGEXP=="M" | storm2$PROPDMGEXP=="m"),]$propexp2 <- 10^6
storm2[which(storm2$PROPDMGEXP=="B" | storm2$PROPDMGEXP=="b"),]$propexp2 <- 10^9
table(storm2$PROPDMGEXP)
table(storm2$propexp2)
table(storm2$CROPDMGEXP)
table(storm2$PROPDMGEXP)
storm2[which(storm2$PROPDMGEXP=="K" | storm2$PROPDMGEXP=="k"),]$propexp2 <- 10^3
storm2[which(storm2$PROPDMGEXP=="M" | storm2$PROPDMGEXP=="m"),]$propexp2 <- 10^6
storm2[which(storm2$PROPDMGEXP=="B"),]$propexp2 <- 10^9
storm2$cropexp2 <- 10^0
storm2[which(storm2$CROPDMGEXP=="K" | storm2$CROPDMGEXP=="k"),]$cropexp2 <- 10^3
storm2[which(storm2$CROPDMGEXP=="M" | storm2$CROPDMGEXP=="m"),]$cropexp2 <- 10^6
storm2[which(storm2$CROPDMGEXP=="B"),]$cropexp2 <- 10^9
table(storm2$CROPDMGEXP)
table(storm2$propexp2)
table(storm2$cropexp2)
storm2$propdamage <- storm2$PROPDMGEXP*storm2$propexp2
storm2$cropdamage <- storm2$CROPDMGEXP*storm2$cropexp2
storm2$propdamage <- storm2$PROPDMG*storm2$propexp2
storm2$cropdamage <- storm2$CROPDMG*storm2$cropexp2
sort(table(storm2$propdamage), decreasing = TRUE)[1:10]
sort(table(storm2$cropdamage), decreasing = TRUE)[1:10]
stormHealth <- aggregate(data=storm2, cbind(FATALITIES, INJURIES)~EVTYPE, FUN=sum)
stormHealth$total <- stormHealth$FATALITIES + stormHealth$INJURIES
str(stormHealth)
stormHealth <- stormHealth[stormHealth$total >0,]
summary(stormHealth)
stormHealth <- stormHealth[stormHealth$total >0,]
View(stormHealth)
stormEconomic <- aggregate(data=storm2, cbind(propdamage, cropdamage)~EVTYPE, FUN=sum)
stormEconomic$total <- stormEconomic$propdamage + stormEconomic$cropdamage
stormEconomic <- stormEconomic[stormEconomic$total >0,]
stormHealth <- stormHealth[order(stormHealth$total,decreasing=TRUE),]
stormHealthtop10 <- stormHealth[1:10,]
stormHealthtop10
stormEconomic <- stormEconomic[stormEconomic$total >0,]
stormEconomic <- stormEconomic[order(stormEconomic$total, decreasing=TRUE),]
stormEconomictop10 <- stormEconomic[1:10,]
stormEconomictop10
stormEconomictop10 <- stormEconomic[1:10,]
stormEconomictop10 <- stormEconomic[1:10,]
library(ggplot2)
ggplot(data=stormHealthtop10, aes(x = factor(EVTYPE), y = total)) +
geom_bar(stat = "identity", fill="gray", colour="blue") +
coord_flip() + labs(title = "Top 10 Event Types Most Harmful to Population Health", x = "Event Types", y = "Total of Fatalities and Injuries")
ggplot(data=stormHealthtop10, aes(x = reoder(EVTYPE, -total),y = total)) +
geom_bar(stat = "identity", fill="gray", colour="blue") +
coord_flip() + labs(title = "Top 10 Event Types Most Harmful to Population Health", x = "Event Types", y = "Total of Fatalities and Injuries")
ggplot(data=stormHealthtop10, aes(x = oder(EVTYPE, -total),y = total)) +
geom_bar(stat = "identity", fill="gray", colour="blue") +
coord_flip() + labs(title = "Top 10 Event Types Most Harmful to Population Health", x = "Event Types", y = "Total of Fatalities and Injuries")
ggplot(data=stormHealthtop10, aes(x = order(EVTYPE, -total),y = total)) +
geom_bar(stat = "identity", fill="gray", colour="blue") +
coord_flip() + labs(title = "Top 10 Event Types Most Harmful to Population Health", x = "Event Types", y = "Total of Fatalities and Injuries")
ggplot(data=stormHealthtop10, aes(x = order(factor(EVTYPE), -total),y = total)) +
geom_bar(stat = "identity", fill="gray", colour="blue") +
coord_flip() + labs(title = "Top 10 Event Types Most Harmful to Population Health", x = "Event Types", y = "Total of Fatalities and Injuries")
barplot(height = stormHealthtop10$total, names.arg = stormHealthtop10$EVTYPE, main = 'Fatalities', las=2)
par(mar=c(10,5,1,1))
barplot(height = stormHealthtop10$total, names.arg = stormHealthtop10$EVTYPE, main = 'Fatalities', las=2)
library(ggplot2)
ggplot(data=stormHealthtop10, aes(x = order(factor(EVTYPE), -total),y = total)) +
geom_bar(stat = "identity", fill="gray", colour="blue") +
coord_flip() + labs(title = "Top 10 Event Types Most Harmful to Population Health", x = "Event Types", y = "Total of Fatalities and Injuries")
par(mar=c(10,5,1,1))
barplot(height = stormHealthtop10$total, names.arg = stormHealthtop10$EVTYPE, main = 'Fatalities', las=2)
par(mar=c(10,8,1,1))
barplot(height = stormHealthtop10$total, names.arg = stormHealthtop10$EVTYPE, main = 'Fatalities', las=2)
par(mar=c(20,8,1,1))
barplot(height = stormHealthtop10$total, names.arg = stormHealthtop10$EVTYPE, main = 'Fatalities', las=2)
library(reshape2)
stormHealthtop10a <- melt(stormHealthtop10, id.vars="EVTYPE")
ggplot(data=stormHealthtop10a, aes(x = order(factor(EVTYPE), -total),y = total)) +
geom_bar(stat = "identity", fill="gray", colour="blue") +
coord_flip() + labs(title = "Top 10 Event Types Most Harmful to Population Health", x = "Event Types", y = "Total of Fatalities and Injuries")
ggplot(data=stormHealthtop10a, aes(x =factor(EVTYPE),y = total)) +
geom_bar(stat = "identity", fill="gray", colour="blue") +
coord_flip() + labs(title = "Top 10 Event Types Most Harmful to Population Health", x = "Event Types", y = "Total of Fatalities and Injuries")
View(stormHealthtop10)
ggplot(data=stormHealthtop10, aes(x =reorder(EVTYPE, -total),y = total)) +
geom_bar(stat = "identity", fill="gray", colour="blue") +
coord_flip() + labs(title = "Top 10 Event Types Most Harmful to Population Health", x = "Event Types", y = "Total of Fatalities and Injuries")
ggplot(data=stormHealthtop10, aes(x =reorder(EVTYPE, total),y = total)) +
geom_bar(stat = "identity", fill="gray", colour="blue") +
coord_flip() + labs(title = "Top 10 Event Types Most Harmful to Population Health", x = "Event Types", y = "Total of Fatalities and Injuries")
ggplot(data=stormEconomictop10, aes(x =reorder(EVTYPE, total),y = total)) +
geom_bar(stat = "identity", fill="gray", colour="blue") +
coord_flip() + labs(title = "Top 10 Worst Event for Economics ", x = "Event Types", y = "Total of Property and Crop Damages")
ggplot(data=stormHealthtop10, aes(x =reorder(EVTYPE, total),y = total)) +
geom_bar(stat = "identity", fill="gray", colour="blue") +
coord_flip() + labs(title = "Top 10 Most Harmful Events to Population Health", x = "Event Types", y = "Total of Fatalities and Injuries")
knitr::opts_chunk$set(echo = TRUE)
set.seed(10)
exponential <- 40
lambda <- 0.2
Simulation <- NULL
for(i in 1:1000) {
Simulation <- c(Simulation, mean(rexp(exponential, lambda)))
set.seed(10)
exponential <- 40
lambda <- 0.2
Simulation <- NULL
for(i in 1:1000) {
Simulation <- c(Simulation, mean(rexp(exponential, lambda)))
}
knitr::opts_chunk$set(echo = TRUE)
set.seed(10)
exponential <- 40
lambda <- 0.2
Simulation <- NULL
for(i in 1:1000) {
Simulation <- c(Simulation, mean(rexp(exponential, lambda)))
}
mean(Simulation)
1/lambda
set.seed(100)
exponential <- 40
lambda <- 0.2
Simulation <- NULL
for(i in 1:1000) {
Simulation <- c(Simulation, mean(rexp(exponential, lambda)))
}
mean(Simulation)
mean(Simulation) - (1/lambda)
var(Simulation)
((1/lambda)/sqrt(exponential))^2
hist(Simulation, breaks = exponential, prob = T, col = "green", xlab = "Means", main="Distribution of 40 Exponentials")
a <- seq(min(Simulation), max(Simulation), length = 100)
lines(a, dnorm(a, mean = 1/lambda, sd = (1/lambda/sqrt(exponential))), pch = 25, col = "black")
lines(a, dnorm(a, mean = mean(Simulation), sd = var(Simulation)), pch = 25, col = "red")
hist(Simulation, breaks = exponential, prob = T, col = "gray", xlab = "Means", main="Distribution of 40 Exponentials")
a <- seq(min(Simulation), max(Simulation), length = 100)
lines(a, dnorm(a, mean = 1/lambda, sd = (1/lambda/sqrt(exponential))), pch = 25, col = "black")
lines(a, dnorm(a, mean = mean(Simulation), sd = var(Simulation)), pch = 25, col = "red")
exponentialLarge <- 1000
SimulationLarge <- NULL
for(i in 1:1000) {
SimulationLarge <- c(SimulationLarge, mean(rexp(exponentialLarge, lambda)))
}
hist(SimulationLarge, breaks = 40, prob = T, col = "gray", xlab = "Means", main="Distribution of 1000 Exponentials")
b <- seq(min(SimulationLarge), max(SimulationLarge), length = 100)
lines(b, dnorm(b, mean = 1/lambda, sd = (1/lambda/sqrt(exponentialLarge))), pch = 25, col = "black")
lines(b, dnorm(b, mean = mean(SimulationLarge), sd = sqrt(var(SimulationLarge))), pch = 25, col = "red")
data("Toothgrowth")
library(datasets)
data("Toothgrowth")
data("ToothGrowth")
str(ToothGrowth)
summary(ToothGrowth)
str(ToothGrowth)
table(ToothGrowth$dose)
str(ToothGrowth)
summary(ToothGrowth)
table(ToothGrowth$dose)
library(ggplot2)
ggplot(ToothGrowth, aes(x=dose, y=len))
+ geom_boxplot(aes(fill=factor(dose)))
ggplot(ToothGrowth, aes(x=dose, y=len)) +
geom_boxplot(aes(fill=factor(dose))) +
geom_point() +
facet_grid(.~supp) +
ggtitle("Tooth Growth by Supplement & Dosage")
ggplot(ToothGrowth, aes(x=dose, y=len)) +
geom_boxplot(aes(fill=factor(dose))) +
geom_point() +
ggtitle("Tooth Growth by Dosage")
ggplot(ToothGrowth, aes(x=supp, y=len)) +
geom_boxplot(aes(fill=factor(supp))) +
geom_point() +
ggtitle("Tooth Growth by Supplement Type")
meanSupp <- split(ToothGrowth$len, ToothGrowth$supp)
sapply(meanSupp, mean)
meanDose <- split(ToothGrowth$len, ToothGrowth$dose)
sapply(meanDose, mean)
meanSuppDose <- split(ToothGrowth$len, ToothGrowth$supp,ToothGrowth$dose)
sapply(meanSuppDose, mean)
meanSuppDose <- split(ToothGrowth$len, ToothGrowth$supp .~ToothGrowth$dose)
aggregate(len ~ supp + dose, data = ToothGrowth, FUN = mean)
aggregate(len ~ dose, data = ToothGrowth, FUN = mean)
aggregate(len ~ supp, data = ToothGrowth, FUN = mean)
aggregate(len ~ dose + supp , data = ToothGrowth, FUN = mean)
library(datasets)
data("ToothGrowth")
t.test(len~supply,data=ToothGrowth)
t.test(len~supp,data=ToothGrowth)
t.test(len~dose,data=ToothGrowth)
t.test(len~supp,data=ToothGrowth)
dose05vs1 <- subset(ToothGrowth, dose %in% c(0.5,1.0))
t.test(len~dose,data=dose05vs1)
dose05vs2 <- subset(ToothGrowth, dose %in% c(0.5,2.0))
t.test(len~dose,data=dose05vs2)
dose1vs2 <- subset(ToothGrowth, dose %in% c(1.0,2.0))
t.test(len~dose,data=dose1vs2)
summary(ToothGrowth)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=12, fig.height=8)
library(datasets)
data(mtcars)
head(mtcars)
mtcars$vs   <- factor(mtcars$vs)
mtcars$am   <- factor(mtcars$am,labels=c("Automatic","Manual")) #0-Automatic 1-Manual
boxplot(mpg ~ am, data = mtcars, col = (c("gray","wheat")), ylab = "Miles Per Gallon", xlab = "Transmission Type")
slr <- lm(mpg ~ factor(am), data=mtcars)
summary(slr)
testmpg <- t.test(mpg ~ factor(am), data=mtcars)
testmpg$p.value
testmpf$estimate
testmpg$estimate
testmpg$p.value
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=12, fig.height=8)
setwd("C:/Users/Peesonal/Documents/Dette/Coursera/7. Regression Models/Week4/Project")
library(datasets)
data(mtcars)
head(mtcars)
mtcars$vs   <- factor(mtcars$vs)
mtcars$am   <- factor(mtcars$am,labels=c("Automatic","Manual")) #0-Automatic 1-Manual
slr <- lm(mpg ~ factor(am), data=mtcars)
summary(slr)
multi <- lm(mpg ~ . ,data=mtcars)
summary(multi)
corr(mtcars)[1,]
c<-corr(mtcars)
cor(mtcars)[1,]
View(mtcars)
View(mtcars)
?mtcars
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=12, fig.height=8)
sm <- step(lm(mpg ~ . ,data=mtcars), trace=0, steps=1000)
summary(sm)
sm <- step(lm(mpg ~ . ,data=mtcars), direction = both)
sm <- step(lm(mpg ~ . ,data=mtcars), direction = "both")
summary(sm)
a <- step(lm(mpg ~ . ,data=mtcars), direction = "both")
summary(a)
multivar <- step(lm(mpg ~ . ,data=mtcars), direction="both")
summary(multivar)
m1 <- lm(mpg ~ am, data = mtcars)
m2 <- lm(mpg ~ am + wt + qsec, data = mtcars)
anova(m1,m2)
m3 <- lm(mpg ~ wt+hp+disp+cyl+am, data = mtcars)
m3
summary(m3)
par(mfrow = c(2, 2))
plot(m2)
par(mfrow = c(2, 2))
plot(m2)
slr$model
slr$fitted.values
slr$p.value
summary(slr)$r.squared
summary(slr)$p.value
names(summary(slr))
summary(slr)$coefficients
summary(multivar)$coefficients
summary(multivar)$r.squared
summary(anovatest)$p.value
anovatest <- anova(m1,m2)
summary(anovatest)$p.value
anovatest$p.value
summary(anovatest)$coefficients
names(summary(anovatest))
anovatest <- anova(m1,m2)
anova(m1,m2)
anovatest$`Pr(>F)`
anova(m1,m2)
anovatest <- anova(m1,m2)
anovatest$`Pr(>F)`
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Peesonal/Documents/Dette/Coursera/8. Practical Machine Learning/Week 4/Project")
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists("./data/pml-training.csv")) {
url.training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(url.training, destfile = "./data/pml-training.csv")
}
if (!file.exists("./data/pml-testing.csv")) {
url.testing <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url.testing, destfile = "./data/pml-testing.csv")
}
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists("./data/pml-training.csv")) {
url.training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(url.training, destfile = "./data/pml-training.csv")
}
if (!file.exists("./data/pml-testing.csv")) {
url.testing <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url.testing, destfile = "./data/pml-testing.csv")
}
training <- read.csv("./pml-training.csv", na.strings=c("NA","#DIV/0!",""))
testing <- read.csv("./pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
dim(training)
dim(testing)
View(testing)
training <- training[, colSums(is.na(training)) == 0]
testing <- testing[, colSums(is.na(testing)) == 0]
View(testing)
names(training)
training <- training[,-(1:7)]
View(testing)
testing <- testing[,-(1:7)]
training_data <- createDataPartition(training$classe, p=0.6, list=FALSE)
library(caret)
install.packages("caret")
library(caret)
training_data <- createDataPartition(training$classe, p=0.6, list=FALSE)
fortraining <- createDataPartition(training$classe, p=0.6, list=FALSE)
training_data <- training[fortraining,]
testing_data <- training[-fortraining,]
set.seed(100)
dtree <- rpart(classe ~ ., data = training_data, method="class", control = rpart.control(method = "cv", number = 10))
library(rpart)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
install.packages("rpart.plot")
install.packages("rattle")
install.packages("randomForest")
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
rattle()
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
setwd("C:/Users/Peesonal/Documents/Dette/Coursera/8. Practical Machine Learning/Week 4/Project")
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists("./data/pml-training.csv")) {
url.training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(url.training, destfile = "./data/pml-training.csv", method="curl")
}
if (!file.exists("./data/pml-testing.csv")) {
url.testing <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url.testing, destfile = "./data/pml-testing.csv", method="curl")
}
training <- read.csv("./pml-training.csv", na.strings=c("NA","#DIV/0!",""))
training <- training[, colSums(is.na(training)) == 0]
training <- training[,-(1:7)]
library(caret)
fortraining <- createDataPartition(training$classe, p=0.6, list=FALSE)
training_data <- training[fortraining,]
testing_data <- training[-fortraining,]
set.seed(100)
dtree <- rpart(classe ~ ., data = training_data, method="class", control = rpart.control(method = "cv", number = 10))
fancyRpartPlot(dtree)
dtree <- rpart(classe ~ ., data = training_data, method="class", control = rpart.control(method = "cv", number = 10))
library(rpart)
dtree <- rpart(classe ~ ., data = training_data, method="class", control = rpart.control(method = "cv", number = 10))
dtree <- rpart(classe ~ ., data = training_data, method="class", control = rpart.control(method = "cv", number = 10))
fancyRpartPlot(dtree)
rattle()
fancyRpartPlot(dtree)
predictdtree <- predict(dtree, newdata=testing_data, type="class")
confusionMatrix(predictdtree, testing_data$classe)
predictdtree <- predict(dtree, newdata=testing_data, type="class")
confusionMatrix(predictdtree, testing_data$classe)
set.seed(100)
predictdtree <- predict(dtree, newdata=testing_data, type="class")
confusionMatrix(predictdtree, testing_data$classe)
install.packages('caret', dependencies = TRUE)
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
knitr::opts_chunk$set(echo = TRUE)
predictdtree <- predict(dtree, newdata=testing_data, type="class")
confusionMatrix(predictdtree, testing_data$classe)
dtree <- rpart(classe ~ ., data = training_data, method="class", control = rpart.control(method = "cv", number = 10))
library(rattle)
dtree <- rpart(classe ~ ., data = training_data, method="class", control = rpart.control(method = "cv", number = 10))
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
setwd("C:/Users/Peesonal/Documents/Dette/Coursera/8. Practical Machine Learning/Week 4/Project")
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists("./data/pml-training.csv")) {
url.training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(url.training, destfile = "./data/pml-training.csv", method="curl")
}
if (!file.exists("./data/pml-testing.csv")) {
url.testing <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url.testing, destfile = "./data/pml-testing.csv", method="curl")
}
training <- read.csv("./pml-training.csv", na.strings=c("NA","#DIV/0!",""))
training <- training[, colSums(is.na(training)) == 0]
names(training)
#remove the first 7 variables that are not useful for the analysis
training <- training[,-(1:7)]
fortraining <- createDataPartition(training$classe, p=0.6, list=FALSE)
training_data <- training[fortraining,]
testing_data <- training[-fortraining,]
set.seed(100)
dtree <- rpart(classe ~ ., data = training_data, method="class", control = rpart.control(method = "cv", number = 10))
fancyRpartPlot(dtree)
predictdtree <- predict(dtree, newdata=testing_data, type="class")
confusionMatrix(predictdtree, testing_data$classe)
cMdtree <- ConfusionMatrix(predictdtree, testing_data$classe)
cMdtree <- confusionMatrix(predictdtree, testing_data$classe)
plot(cMdtree$table, col = cMdtree$byClass, main = paste("Decision Tree - Accuracy =",
round(cMdtree$overall['Accuracy'], 4)))
fortraining <- createDataPartition(training$classe, p=0.7, list=FALSE)
training_data <- training[fortraining,]
testing_data <- training[-fortraining,]
set.seed(100)
dtree <- rpart(classe ~ ., data = training_data, method="class", control = rpart.control(method = "cv", number = 10))
fancyRpartPlot(dtree)
set.seed(100)
dtree <- rpart(classe ~ ., data = training_data, method="class", control = rpart.control(method = "cv", number = 10))
fancyRpartPlot(dtree)
predictdtree <- predict(dtree, newdata=testing_data, type="class")
cMdtree <- confusionMatrix(predictdtree, testing_data$classe)
plot(cMdtree$table, col = cMdtree$byClass, main = paste("Decision Tree - Accuracy =",
round(cMdtree$overall['Accuracy'], 4)))
confusionMatrix(predictdtree, testing_data$classe)
control <- trainControl(method="cv", 5)
RandomForest <- train(classe ~ ., data=train_data, method="rf", trControl=control)
RForest <- train(classe ~ ., data=training_data, method="rf", trControl=control)
